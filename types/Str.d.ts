import { ExcerptOptions } from './methods';
import Stringable from './Stringable';
import { MarkdownConfiguration } from './types/markdown';
export { ExcerptOptions };
export type AssociativeArray = {
    [key: string]: string | boolean | number;
};
export type Callable = Function | null;
export declare const Str: {
    randomStringFactory: Callable;
    _camelCache: {
        [key: string]: string;
    };
    _studlyCache: {
        [key: string]: string;
    };
    _snakeCache: {
        [key: string]: Record<string, string>;
    };
    of: (string: string) => Stringable;
    after: (subject: string, search?: string) => string;
    afterLast: (subject: string, search?: string) => string;
    ascii: (value: string) => string;
    before: (subject: string, search?: string) => string;
    beforeLast: (subject: string, search?: string) => string;
    between: (subject: string, from?: string, to?: string) => string;
    betweenFirst: (subject: string, from?: string, to?: string) => string;
    camel: (value: string) => string;
    contains: (haystack: string, needles: string | string[], ignoreCase?: boolean) => boolean;
    containsAll: (haystack: string, needles: string[], ignoreCase?: boolean) => boolean;
    endsWith: (haystack: string, needles: string | number | string[] | null) => boolean;
    excerpt: (text: string, phrase?: string, { radius, omission }?: ExcerptOptions) => string;
    explode: (text: string, delimiter: string, limit?: number | undefined) => string[];
    finish: (value: string, cap: string) => string;
    wrap: (value: string, before: string, after?: string | undefined) => string;
    is: (pattern: string | (string | null)[], value: string) => boolean;
    isAscii: (value: string) => boolean;
    isJson: (value: string) => boolean;
    isUuid: (value: string) => boolean;
    isUlid: (value: string) => boolean;
    kebab: (value: string) => string;
    length: (value: string) => number;
    limit: (value: string, limit?: number, end?: string) => string;
    lower: (value: string) => string;
    words: (value: string, words?: number, end?: string) => string;
    markdown: (string: string, options?: MarkdownConfiguration) => string;
    inlineMarkdown: (string: string, options?: MarkdownConfiguration) => string;
    mask: (string: string, character: string, index: number, length?: number | null) => string;
    match: (pattern: string | RegExp, subject: string) => string;
    matchAll: (pattern: string | RegExp, subject: string) => string[];
    padBoth: (value: string, length?: number, pad?: string) => string;
    padLeft: (value: string, length?: number, pad?: string) => string;
    padRight: (value: string, length?: number, pad?: string) => string;
    parseCallback: (callback: string, method?: string | null) => (string | null)[];
    random: (length?: number) => string;
    createRandomStringsUsing: (callable: Callable) => void;
    createRandomStringsUsingSequence: (sequence: AssociativeArray, whenMissing?: Callable) => void;
    createRandomStringsNormally: () => void;
    repeat: (string: string, times: number) => string;
    replaceArray: (search: string, replace: string[], subject: string) => string;
    replace: (search: string | string[], replace: string | string[], subject: string) => string;
    replaceFirst: (search: string, replace: string, subject: string) => string;
    replaceLast: (search: string, replace: string, subject: string) => string;
    remove: (search: string | string[], subject: string, caseSensitive?: boolean) => string;
    reverse: (value: string) => string;
    start: (value: string, prefix: string) => string;
    upper: (value: string) => string;
    title: (value: string) => string;
    headline: (value: string) => string;
    slug: (title: string, separator?: string, language?: string | null, dictionary?: Record<string, string>) => string;
    snake: (value: string, delimiter?: string) => string;
    squish: (value: string) => string;
    startsWith: (haystack: string, needles: string | number | string[] | null) => boolean;
    stripTags: (string: string, allowedTags?: string) => string;
    studly: (value: string) => string;
    substr: (value: string, start: number, length?: number | null) => string;
    substrCount: (haystack: string, needle: string, offset?: number, length?: number) => number;
    substrReplace: (string: string, replace: string, offset?: number, length?: number | null) => string;
    swap: (map: Record<string, string>, subject: string) => string;
    trim: (value: string, characters?: string | undefined) => string;
    ltrim: (value: string, characters?: string | undefined) => string;
    rtrim: (value: string, characters?: string | undefined) => string;
    lcfirst: (string: string) => string;
    ucfirst: (string: string) => string;
    ucsplit: (string: string) => string[];
    wordCount: (value: string) => number;
    uuid: () => Stringable;
    ulid: () => Stringable;
    preg_quote: (value: string, delimiter?: string) => string;
    flushCache(): void;
};
export default Str;
